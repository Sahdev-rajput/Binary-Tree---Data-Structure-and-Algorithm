#include <iostream>
#include <queue>
using namespace std;
class Node
{
public:
	Node* lchild;
	Node* rchild;
	int data;
	Node() {};
};
Node* root = NULL;
class Tree {
public:
	queue<Node*> q;
	Node* t, * p;
	Tree()
	{
	}
	void create();
	void Preorder(Node *t);
	void Inorder(Node *t);
	void Postorder(Node *t);
	void levelorder(Node *t);
};
void Tree::create()
{
	p = new Node;
	int x;
	cout << "We are first creating the root Node " << endl;
	cout << "Enter the root node's data: ";
	cin >> x;
	root->data = x;
	root->lchild = root->rchild = NULL;
	q.push(root);
	while (!q.empty())
	{
		p = q.front();
		q.pop();
		cout << "Enter the left child of " << p->data << " : ";
		cin >> x;
		if (x != -1)
		{
			t = new Node;
			t->data = x;
			t->lchild = t->rchild = NULL;
			p->lchild = t;
			q.push(t);
		}
		cout << "Enter the right child of " << p->data << " : ";
		cin >> x;
		if (x != -1)
		{
			t = new Node;
			t->data = x;
			t->lchild = t->rchild = NULL;
			p->rchild = t;
			q.push(t);
		}
	}
}
void Tree::Preorder(Node *t)
{
	if (t != NULL)
	{
		cout << t->data << " ";
		Preorder(t->lchild);
		Preorder(t->rchild);
	}
}
void Tree::Inorder(Node* t)
{
	if (t != NULL)
	{
		Inorder(t->lchild);
		cout << t->data << " ";
		Inorder(t->rchild);
	}
}
void Tree::Postorder(Node* t)
{
	if (t != NULL)
	{
		Postorder(t->lchild);
		Postorder(t->rchild);
		cout << t->data << " ";
	}
}
void Tree::levelorder(Node* t)
{
	q.push(root);
	while (!q.empty())
	{
		p = q.front();
		q.pop();
		cout << p->data << " ";
		if (p->lchild != NULL)
		{
			q.push(p->lchild);
		}
		if (p->rchild != NULL)
		{
			q.push(p->rchild);
		}
	}
}
int main()
{
	root = new Node;
	Tree t;
	t.create();
	cout << "PreOrder: ";
	t.Preorder(root);
	cout << endl;
	cout << "InOrder: ";
	t.Inorder(root);
	cout << endl;
	cout << "PostOrder: ";
	t.Postorder(root);
	cout << endl;
	cout << "LevelOrder: ";
	t.levelorder(root);
	cout << endl;
}
