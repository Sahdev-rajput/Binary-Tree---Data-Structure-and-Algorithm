#include <iostream>
#include <stack>
#include <queue>
using namespace std;
static int purpose = 0;
class Node
{
public:
	Node* lchild;
	Node* rchild;
	int data;
	Node() {};
};
Node* root = NULL;
class Tree {
public:
	queue<Node*> q;
	Node* t, * p;
	Tree()
	{
	}
	void create();
	void Preorder(Node *t);
	void Inorder(Node *t);
	void Postorder(Node *t);
	void levelorder(Node *t);
	void IPreorder(Node* t);
	void IInorder(Node* t);
	void IPostorder(Node* t);
};
void Tree::create()
{
	p = new Node;
	int x;
	cout << "We are first creating the root Node " << endl;
	cout << "Enter the root node's data: ";
	cin >> x;
	root->data = x;
	root->lchild = root->rchild = NULL;
	q.push(root);
	while (!q.empty())
	{
		p = q.front();
		q.pop();
		cout << "Enter the left child of " << p->data << " : ";
		cin >> x;
		if (x != -1)
		{
			t = new Node;
			t->data = x;
			t->lchild = t->rchild = NULL;
			p->lchild = t;
			q.push(t);
		}
		cout << "Enter the right child of " << p->data << " : ";
		cin >> x;
		if (x != -1)
		{
			t = new Node;
			t->data = x;
			t->lchild = t->rchild = NULL;
			p->rchild = t;
			q.push(t);
		}
	}
}
void Tree::Preorder(Node *t)
{
	if (t != NULL)
	{
		cout << t->data << " ";
		Preorder(t->lchild);
		Preorder(t->rchild);
	}
}
void Tree::Inorder(Node* t)
{
	if (t != NULL)
	{
		Inorder(t->lchild);
		cout << t->data << " ";
		Inorder(t->rchild);
	}
}
void Tree::Postorder(Node* t)
{
	if (t != NULL)
	{
		Postorder(t->lchild);
		Postorder(t->rchild);
		cout << t->data << " ";
	}
}
void Tree::levelorder(Node* t)
{
	q.push(root);
	while (!q.empty())
	{
		p = q.front();
		q.pop();
		cout << p->data << " ";
		if (p->lchild != NULL)
		{
			q.push(p->lchild);
		}
		if (p->rchild != NULL)
		{
			q.push(p->rchild);
		}
	}
}
void Tree::IPreorder(Node* t)
{
	stack<Node*> st;
	while (t != NULL || !st.empty())
	{
		if (t != NULL)
		{
			cout << t->data << " ";
			st.push(t);
			t = t->lchild;
		}
		else
		{
			t = st.top();
			st.pop();
			t = t->rchild;
		}
	}
}
void Tree::IInorder(Node* t)
{
	stack<Node*> st;
	while (t != NULL || !st.empty())
	{
		if (t != NULL)
		{
			st.push(t);
			t = t->lchild;
		}
		else
		{
			t = st.top();
			st.pop();
			cout << t->data << " ";
			t = t->rchild;
		}
	}
}
void Tree::IPostorder(Node* t)
{
	stack<Node*> st;
	Node* temp;
	while (t != NULL || !st.empty())
	{
		if (t != NULL)
		{
			st.push(t);
			t = t->lchild;
			purpose = 0;
		}
		else
		{
			temp = st.top();
			st.pop();
			if (purpose==0)
			{
				st.push(temp);
				t = temp->rchild;
				purpose=1;
			}
			else
			{
				cout << temp->data << " ";
			}
		}
	}
}
int count(struct Node* t)
{
	if (t)
	{
		return count(t->lchild) + count(t->rchild) + 1;
	}
	return 0;
}
int height(struct Node* t)
{
	int x, y;
	if (t)
	{
		x = height(t->lchild);
		y = height(t->rchild);
		if (x > y)
		{
			return x + 1;
		}
		else
		{
			return y + 1;
		}
	}
	return 0;
}
int Degrezero(struct Node* t)
{
	int x, y;
	if (t)
	{
		x = Degrezero(t->lchild);
		y = Degrezero(t->rchild);
		if (t->lchild == NULL && t->rchild == NULL)
		{
			return x + y + 1;
		}
		else {
			return x + y;
		}
	}
	return 0;
}
int DegreeOneortwo(struct Node* t)
{
	int x, y;
	if (t)
	{
		x = DegreeOneortwo(t->lchild);
		y = DegreeOneortwo(t->rchild);
		if (t->lchild || t->rchild)
		{
			return x + y + 1;
		}
		else {
			return x + y;
		}
	}
	return 0;
}
int Degreexactlyone(struct Node* t)
{
	int x, y;
	if (t)
	{
		x = Degreexactlyone(t->lchild);
		y = Degreexactlyone(t->rchild);
		if (t->lchild!=NULL ^ t->lchild!=NULL)
		{
			return x + y + 1;
		}
		else {
			return x + y;
		}
	}
	return 0;
}
int Degreexactlytwo(struct Node* t)
{
	int x, y;
	if (t)
	{
		x = Degreexactlytwo(t->lchild);
		y = Degreexactlytwo(t->rchild);
		if (t->lchild != NULL && t->rchild != NULL)
		{
			return x + y + 1;
		}
		else {
			return x + y;
		}
	}
	return 0;
}
int main()
{
	root = new Node;
	Tree t;
	t.create();
	cout << "PreOrder: ";
	t.Preorder(root);
	cout << endl;
	cout << "InOrder: ";
	t.Inorder(root);
	cout << endl;
	cout << "PostOrder: ";
	t.Postorder(root);
	cout << endl;
	cout << "LevelOrder: ";
	t.levelorder(root);
	cout << endl;
	cout << endl << endl;
	cout << "Iterative Preorder: ";
	t.IPreorder(root);
	cout << endl;
	cout << "Iterative Inorder: ";
	t.IInorder(root);
	cout << endl;
	cout << endl << endl << endl;
	cout << "Number of Nodes: ";
	cout << count(root);
	cout << endl;
	cout << "Height of Tree: ";
	cout << height(root);
	cout << endl;
	cout << "Number of Nodes with degree 0 (or leaf Node): ";
	cout << Degrezero(root);
	cout << endl;
	cout << "Number of Nodes with degree 1: ";
	cout << Degreexactlyone(root);
	cout << endl;
	cout << "Number of Nodes with degree 1 0r 2: ";
	cout << DegreeOneortwo(root);
	cout << endl;
	cout << "Number of Nodes with degree 2: ";
	cout << Degreexactlytwo(root);
	cout << endl;
	cout << endl << endl << endl;
}
