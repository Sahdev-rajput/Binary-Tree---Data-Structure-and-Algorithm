#include <iostream>
using namespace std;
#pragma once
struct Node
{
	struct Node* lchild;
	int data;
	struct Node* rchild;
}*root=NULL;
struct Queue
{
	int size;
	int front;
	int rear;
	Node** Q;
};
void enqueue(struct Queue* q, Node *x)
{
	if (q->rear == q->size - 1)
	{
		cout << "Queue is full" << endl;
	}
	else
	{
		q->rear++;
		q->Q[q->rear] = x;
	}
}
Node* dequeue(struct Queue* q)
{
	Node* x = NULL;
	if (q->rear == q->front)
	{
		cout << "Queue is Empty" << endl;
	}
	else
	{
		q->front++;
		x = q->Q[q->front];
	}
	return x;
}
bool isEmpty(struct Queue p)
{
	if (p.front == p.rear)
	{
		return true;
	}
	else
	{
		return false;
	}
}
void create(Queue &q)
{
	struct Node* p, * t;
	int x;
	cout << "First we are creating the root node: Enter the value of data in root Node : " << endl;
	cin >> x;
	root = new struct Node;
	root->data = x;
	root->lchild = root->rchild = NULL;
	enqueue(&q, root);
	while (!isEmpty(q))
	{
		p = dequeue(&q);
		cout << "Enter left child of " << p->data << " : ";
		cin >> x;
		if (x != -1)
		{
			t = new struct Node;
			t->data = x;
			t->lchild = t->rchild = NULL;
			p->lchild = t;
			enqueue(&q,t);
		}
		cout << "Enter right child of " << p->data << " : ";
		cin >> x;
		if (x != -1)
		{
			t = new struct Node;
			t->data = x;
			t->lchild = t->rchild = NULL;
			p->rchild = t;
			enqueue(&q, t);
		}
	}
}
void PreOrder(struct Node* t)
{
	if (t != NULL)
	{
		cout << t->data << " ";
		PreOrder(t->lchild);
		PreOrder(t->rchild);
	}
}
int main()
{
	Queue q;
	q.front = q.rear = -1;
	q.size = 10;
	q.Q = new Node * [q.size];
	create(q);
	PreOrder(root);
}
